button EN|BG
meteo link
button UP to header

from remark examiner:
Обектно-ориентираното програмиране (ООП) е парадигма в компютърното програмиране, при която една програмна система се моделира като набор от обекти, които взаимодействат помежду си, за разлика от традиционното виждане, в което една програма е списък от инструкции, които компютърът изпълнява. Всеки обект е способен да получава съобщения, обработва данни и праща съобщения на други обекти.

Обектно-ориентираното програмиране използва следните понятия:
-Обекти – държат данни (полета) и функционалност заедно в обособени единици в една компютърна програма; обектите служат за база на модулността и структурата в една обектно-ориентирана компютърна програма. Обектите са самостоятелни единици и трябва да са лесни за идентифициране. Модуляризираността позволява на части от програмата да съответстват на отделни аспекти на проблема.
-Абстракция – Способността на една програма да игнорира някои аспекти на информацията, с която работи – способността да се съсредоточава върху същественото. Всеки обект в системата служи като модел на един абстрактен „агент“, който може да извършва дадена работа, да променя състоянието си и да докладва за него, и да „общува“ с други обекти в системата без да разкрива как са реализирани тези свойства. Процесите, функциите или методите също подлежат на абстракция и когато те са абстрактни се използват разнообразни техники за разширяване на една абстракция:
-Капсулиране – наричано също „скриване на информация“: Прави невъзможно за потребителите на даден обект да променят неговото вътрешно състояние по неочакван начин; само вътрешните методи на обекта имат достъп до неговото състояние. Всеки клас има интерфейс, който определя как другите класове могат да взаимодействат с него като по този начин е черна кутия за другите класове и останалата част от програмите, които го използват. Това предпазва потребителите от разстройване на инвариантите на класа, което е полезно, защото позволява реализацията на един клас обекти да бъде променена в аспекти, които не са достъпни чрез интерфейса без това да изисква промени в потребителските програми. Дефинициите за капсулиране се съсредоточават по-скоро върху групирането и пакетирането на сродна информация (кохезия) отколкото върху сигурността. Обектно-ориентираните езици за програмиране обикновено не предлагат формални ограничения с цел сигурност на вътрешното състояние на обектите. Използването на един метод за достъп е въпрос на конвенция за дизайна на интерфейса.
-Полиморфизъм – Различни неща или обекти могат да имат еднакъв интерфейс или да отговарят на едно и също (по наименование) съобщение и да реагират подходящо в зависимост от природата или типа на обекта. Това позволява много различни неща да бъдат взаимозаменими. Например, ако една птица получи съобщение „движи се бързо“, тя ще маха с крила и ще лети. Ако един лъв получи същото съобщение, той ще тича, използвайки краката си. И двете животни отговарят на една и съща молба по начини, които са подходящи за всяко от тях. По този начин, една променлива в програмния текст може да съдържа различни обекти по време на изпълнение на програмата и да извиква различни методи по различно време на изпълнение.
-Наследяване – Организира и подпомага полиморфизма и капсулирането, като позволява да бъдат дефинирани и създавани обекти, които са специализирани варианти на вече съществуващи обекти. Новите обекти могат да използват (и разширяват) вече дефинираното поведение, без да е необходимо да реализират това поведение отново. Това обикновено се прави чрез групиране на обектите в класове и дефиниране на нови класове, които разширяват съществуващи класове и подреждане по този начин на класовете в дървета или решетки, отразяващи сходствата в тяхното поведение. Докато използването на класове е най-популярната техника за наследяване, има и друга известна техника, наречена Прототипно-базирано програмиране.

!!! Tests, forms

SOLID principles:

Инициали	Акроними	Концепция
S	SRP[4] Single Responsibility Principle
    Принцип за единствена отговорност
    Класът трябва да има една-единствена отговорност (т.е. само промени в софтуерните спецификации могат да предизвикат промяна в спецификациите на класа)
O	OCP[5] Open-Closed Principle
    Принцип отворен/затворен
    „Софтуерните единици трябва да са отворени за разширение, но затворени за промяна.“
L	LSP[6] Liskov Substitution Principle
    Принцип на заместване на Лисков
    Всеки наследник (подтип) трябва лесно да заменя всичките си базови типове.
I	ISP[7] Interface Segregation Principle
    Принцип за разделяне на интерфейсите
    „Много на брой малки интерфейси е по-добре от един голям общ интерфейс.“[8]
D	DIP[9] Dependency Inversion Principle
    Принцип на обръщане на зависимостите
    Всички класове трябва да зависят от абстракции и нито един не трябва да зависи от конкретен клас.”[8]


